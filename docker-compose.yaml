version: '3.3'

services:
  php-fpm:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: PHP-FPM
    volumes:
      - ./:/var/www/html
      - vendor_data:/var/www/html/vendor
    networks:
      - app
    depends_on:
      - mysql
      - rabbitmq
    command: bash -c "/var/www/html/docker/scripts/wait-for-db.sh mysql_local root password transfer /bin/true && /var/www/html/docker/scripts/init-app.sh && php-fpm"

  notification-processor:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: NOTIFICATION-PROCESSOR
    command: ["/var/www/html/docker/scripts/notification-processor.sh"]
    volumes:
      - ./:/var/www/html
      - vendor_data:/var/www/html/vendor
    networks:
      - app
    depends_on:
      mysql:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "php", "spark", "--version"]
      interval: 10s
      timeout: 5s
      retries: 5

  nginx:
    image: nginx:latest
    container_name: NGINX
    ports:
      - "80:80"
    volumes:
      - ./:/var/www/html
      - ./docker/config/nginx.conf:/etc/nginx/conf.d/default.conf
      - vendor_data:/var/www/html/vendor
    networks:
      - app
    depends_on:
      - php-fpm

  mysql:
    image: mysql:latest
    container_name: MYSQL
    hostname: mysql_local
    volumes:
      - mysql_data:/var/lib/mysql
    restart: always
    ports:
      - 3306:3306
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_DATABASE: transfer
    networks:
      - app
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-uroot", "-ppassword"]
      interval: 5s
      timeout: 5s
      retries: 20
  
  rabbitmq:
    image: rabbitmq:3-management
    container_name: RABBITMQ
    hostname: rabbitmq
    ports:
      - 5672:5672
      - 15672:15672
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq/
      - rabbitmq_log:/var/log/rabbitmq
    restart: always
    networks:
      - app
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: '0.5GB'
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  app:
    driver: bridge

volumes:
  vendor_data:
  mysql_data:
  rabbitmq_data:
  rabbitmq_log: